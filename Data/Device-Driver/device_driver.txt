The Linux kernel device model:
==============================

Need for a device model
-----------------------
- For the same device, need to use the same device driver on multiple CPU
  architectures (x86, ARM…), even though the hardware controllers are
  different.

- Need for a single driver to support multiple devices of the same kind.

- This requires a clean organization of the code, with the device drivers
  separated from the controller drivers, the hardware description separated
  from the drivers themselves, etc.

Driver: between bus infrastructure and framework:
-------------------------------------------------
In Linux, a driver is always interfacing with:
- a framework that allows the driver to expose the hardware features in a
  generic way ex. netlink socket/IOCTL.
- a bus infrastructure, part of the device model, to detect/communicate
  with the hardware.

Application                user application
-------------------------------------------
    |
System Call interface
    |
Framework
    |
-------------------------------------------
Driver                               Kernel
    |
Bus Insfrastructure
    |
-------------------------------------------
Hardware

Device model data structures:
-----------------------------
The device model is organized around three main data structures:
- struct bus_type: This structure represent one type of bus
  (USB, PCI, I2C, etc.)
- struct device_driver: This structure represents one driver capable of
  handling certain devices on a certain bus.
- struct device: This structure represents one device connected to a bus.

The kernel uses inheritance to create more specialized versions of
`struct device_driver` and `struct device` for each bus subsystem.

The bus driver:
---------------
Example: USB. Implemented in drivers/usb/core/
- Creates and registers the bus_type structure
- Provides an API to register and implement adapter drivers
  (here USB controllers), able to detect the connected devices and allowing to
  communicate with them.
- Provides an API to register and implement device drivers (here USB device
  drivers)
- Matches the device drivers against the devices detected by the
  adapter drivers.
- Defines driver and device specific structures, here mainly struct usb_driver
  and struct usb_interface

USB bus example:
----------------
/* Block diagram */
A single driver for compatible devices, though connected to buses with
different controllers.

Steps to follow for writing device driver:
1. Need to register supported devices to the bus core.

Ex: drivers/net/usb/rtl8150.c
	static struct usb_device_id rtl8150_table[] = {
    	{ USB_DEVICE(VENDOR_ID_REALTEK, PRODUCT_ID_RTL8150) },
    	{ USB_DEVICE(VENDOR_ID_MELCO, PRODUCT_ID_LUAKTX) },
    	{ USB_DEVICE(VENDOR_ID_MICRONET, PRODUCT_ID_SP128AR) },
    	{ USB_DEVICE(VENDOR_ID_LONGSHINE, PRODUCT_ID_LCS8138TX) },
		{[…]},
	};
MODULE_DEVICE_TABLE(usb, rtl8150_table);

2. Need to register hooks to manage devices (newly detected or removed ones),
   as well as to react to power management events (suspend and resume).

	static struct usb_driver rtl8150_driver = {
		.name = "rtl8150",
		.probe = rtl8150_probe,
		.disconnect = rtl8150_disconnect,
		.id_table = rtl8150_table,
		.suspend = rtl8150_suspend,
		.resume = rtl8150_resume
	};

3. The last step is to register the driver structure to the bus core.

	static int __init usb_rtl8150_init(void)
	{
    	return usb_register(&rtl8150_driver);
	}

	static void __exit usb_rtl8150_exit(void)
	{
    	usb_deregister(&rtl8150_driver);
	}

	module_init(usb_rtl8150_init);
	module_exit(usb_rtl8150_exit);

Now the bus driver knows the association between the devices and the
device driver

Note: this code has now been replaced by a shorter module_usb_driver() macro.

Work in the probe() function:
-----------------------------
probe() is called for each newly matched device
- Initialize the device
- Prepare driver work: allocate a structure for a suitable framework,
  allocate memory, map I/O memory, register interrupts…
- When everything is ready, register the new device to the framework.

At driver loading time:
-----------------------
- The USB adapter driver that corresponds to the USB controller registers
  itself to the USB core
- The rtl8150 USB device driver registers itself to the USB core
- The USB core now knows the association between the vendor/product IDs of
  rtl8150 and the struct usb_driver structure of this driver

/* Block Diagram */

When a device is detected:
--------------------------

/* Block Diagram */

The model is recursive:
-----------------------
/* Block Diagram */
Adapter drivers are device drivers too!

Platform devices and drivers:
-----------------------------











Reference: https://bootlin.com/pub/conferences/2018/elc/opdenacker-kernel-programming-device-model-i2c/kernel-programming-device-model-i2c.pdf
